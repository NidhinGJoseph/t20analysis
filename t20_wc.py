# -*- coding: utf-8 -*-
"""T20_WC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rd9h4e8ZTn1Z1PUhLDcjidLDMvIGmebk
"""

import pandas as pd
import numpy as np
from google.colab import drive

## load the csv file
# Load the dataset

# Construct the file path in your Google Drive
file_path = "/content/FullT20wc2024.xlsx"

# Read the CSV file into a DataFrame
df = pd.read_excel(file_path, sheet_name='Sheet1')

# Display the first few rows of the DataFrame
print(df.head())

df.isnull().sum()

df.drop(['out_player_cricinfo_id','out_player_id','dismissal_text_shot','dismissal_text_long','dismissal_text_commentary'],axis=1,inplace=True)

fill_values={'wides':0,'noballs':0,'byes':0,'legbyes':0,'penalty':0,'wicket_type':'np.nan','player_dismissed':''}
df.fillna(fill_values,inplace=True)

df['total_runs']=df['runs_off_bat']+df['extras']
df

matches = df.groupby('bat_team')['match_id'].nunique().reset_index()
matches

runs=df.groupby('bat_team')['runs_off_bat'].sum().reset_index()
runs

Dots = df[(df['wides'] == 0) & (df['runs_off_bat'] == 0)].groupby('bat_team')['ball_number'].count().reset_index()
Dots.columns = ['bat_team', 'ball']
Dots

wickets=df[df['out_player']!='np.nan'].groupby('bat_team')['out_player'].count().reset_index()
wickets.columns=['bat_team','wickets']
wickets

fours=df[df['runs_off_bat']==4].groupby('bat_team')['runs_off_bat'].count().reset_index()
fours

sixes=df[df['runs_off_bat']==6].groupby('bat_team')['runs_off_bat'].count().reset_index()
sixes

Balls=df[(df['noballs']==0) &(df['wides']==0)].groupby('bat_team')['extras'].count().reset_index()
Balls

batting_df = df[['bat_team']]

batting_df=pd.merge(batting_df,Balls,on='bat_team',how='outer')
batting_df=pd.merge(batting_df,wickets,on='bat_team', how='outer')
batting_df=pd.merge(batting_df,fours,on='bat_team', how='outer')
batting_df=pd.merge(batting_df,sixes,on='bat_team', how='outer')
batting_df=pd.merge(batting_df,Dots,on='bat_team', how='outer')
batting_df

batting_df.rename(columns={'batting_team':'Team','match_id':'Matches','runs_off_bat_x':'Runs','extras':'Balls','out_player':'Wickets','runs_off_bat_y':'4s','runs_off_bat':'6s','ball':'WD'},inplace=True)
batting_df

# Create a DataFrame with unique team names
  teams = df[['bat_team']].drop_duplicates()
  teams.columns = ['Team']

  # Merge all dataframes into one
  batting_df = pd.merge(teams, matches, left_on='Team', right_on='bat_team', how='left')
  batting_df = pd.merge(batting_df, runs, on='bat_team', how='left')
  batting_df = pd.merge(batting_df, Balls, on='bat_team', how='left')
  batting_df = pd.merge(batting_df, wickets, on='bat_team', how='left')
  batting_df = pd.merge(batting_df, fours, on='bat_team', how='left')
  batting_df = pd.merge(batting_df, sixes, on='bat_team', how='left')
  batting_df = pd.merge(batting_df, Dots, on='bat_team', how='left')

  # Drop the extra 'bat_team' column
  batting_df.drop('bat_team', axis=1, inplace=True)

  # Rename columns based on their current names
  batting_df.rename(columns={
      'match_id': 'Matches',
      'runs_off_bat_x': 'Runs',  # Assumed 'runs_off_bat_x' is the total runs
      'extras': 'Balls',
      'wickets': 'Outs',
      'runs_off_bat_y': '4s',    # Assumed 'runs_off_bat_y' is the number of fours
      'runs_off_bat': '6s',      # Assumed 'runs_off_bat' is the number of sixes
      'ball': 'WD'               # Assuming 'ball' is for wides
  }, inplace=True)

  # Drop any extra columns if needed
  batting_df.drop(columns=['runs_off_bat'], errors='ignore', inplace=True)

  # Ensure the column names are correctly set
  print(batting_df.columns)

  # Display the final DataFrame
  print(batting_df)

batting_df.insert(5,'Average',round(batting_df['Runs']/batting_df['Outs'],2))
batting_df

batting_df.insert(6,'Strike rate',round(batting_df['Runs']*100/batting_df['Balls'],2))
batting_df

team_runs=df.groupby(['match_id','bat_team'])['total_runs'].sum().reset_index()
high_score = team_runs.loc[team_runs.groupby('bat_team')['total_runs'].idxmax()]

score_df=high_score[['bat_team','total_runs']]
score_df.rename(columns={'batting_  team':'Team','total_runs':'High score'},inplace=True)
score_df

# Rename the 'High score' column in score_df to avoid conflict
score_df.rename(columns={'High score': 'Max High score'}, inplace=True)

# Merge batting_df with score_df on 'Team'
batting_df = pd.merge(batting_df, score_df, on='Team', how='left')
batting_df

# Save the DataFrame to an Excel file
output_path = './Bats_stats.xlsx'
batting_df.to_excel(output_path, index=False)
output_path

Matches=df.groupby('bowl_team')['match_id'].nunique().reset_index()
Matches

Runs_conceeded=df.groupby('bowl_team')['total_runs'].sum().reset_index()
Runs_conceeded

# Count balls bowled by each team excluding 'noballs' and 'wides'
Balls_bowled = df[(df['noballs'] == 0) & (df['wides'] == 0)].groupby('bowl_team').size().reset_index(name='balls_bowled')

# Count extras (total 'noballs' + 'wides') by each team
Extras = df.groupby('bowl_team')[['noballs', 'wides']].sum().reset_index()
Extras['total_extras'] = Extras['noballs'] + Extras['wides']
Extras = Extras[['bowl_team', 'total_extras']]

# Merge both DataFrames
result = pd.merge(Balls_bowled, Extras, on='bowl_team')
print(result)

Wickets_taken = df[pd.notna(df['out_player'])].groupby('bowl_team')['out_player'].count().reset_index(name='wickets_taken')
Wickets_taken

Fours_conceeded=df[df['runs_off_bat']==4].groupby('bowl_team')['runs_off_bat'].count().reset_index()
Fours_conceeded

Sixes_conceeded=df[df['runs_off_bat']==6].groupby('bowl_team')['runs_off_bat'].count().reset_index()
Sixes_conceeded

Dots = df[(df['wides'] == 0) & (df['runs_off_bat'] == 0)].groupby('bowl_team')['ball_number'].count().reset_index(name='dots')
Dots

# Filter out rows where 'out_player' is not NaN
team_wickets = df[pd.notna(df['out_player'])].groupby(['bowl_team', 'match_id'])['out_player'].count().reset_index(name='wickets')

# Find the index of the maximum wickets for each team
idx = team_wickets.groupby('bowl_team')['wickets'].idxmax()

# Use these indices to select the best bowling performances
BBI = team_wickets.loc[idx]

# Select only the relevant columns
BBI = BBI[['bowl_team', 'match_id', 'wickets']]
BBI

# Create Wickets_taken DataFrame
# Group by 'bowl_team' and count the number of dismissals (out_player)
Wickets_taken = df[pd.notna(df['out_player'])].groupby('bowl_team')['out_player'].count().reset_index(name='wickets')

# Define ten_wickets as those with 10 or more wickets
ten_wickets = Wickets_taken[Wickets_taken['wickets'] >= 10]

bowling_df=pd.merge(Matches,Runs_conceeded, on='bowl_team', how='outer')
bowling_df=pd.merge(bowling_df,Wickets_taken,on='bowl_team',how='outer')
bowling_df=pd.merge(bowling_df,Balls_bowled,on='bowl_team',how='outer')
bowling_df=pd.merge(bowling_df,Fours_conceeded,on='bowl_team',how='outer')
bowling_df=pd.merge(bowling_df,Sixes_conceeded,on='bowl_team',how='outer')
bowling_df=pd.merge(bowling_df,Dots,on='bowl_team',how='outer')
bowling_df=pd.merge(bowling_df,BBI,on='bowl_team',how='outer')
bowling_df=pd.merge(bowling_df,ten_wickets,on='bowl_team',how='outer')

print(bowling_df.head())

print(Matches.columns)
print(Runs_conceeded.columns)
print(Wickets_taken.columns)
print(Balls_bowled.columns)
print(Fours_conceeded.columns)
print(Sixes_conceeded.columns)
print(Dots.columns)
print(BBI.columns)
print(ten_wickets.columns)

bowling_df.rename(columns={
    'match_id_x': 'I',
    'total_runs': 'Runs',
    'wickets_x': 'Wickets',
    'balls_bowled': 'Balls',
    'runs_off_bat_x': '4s',
    'runs_off_bat_y': '6s',
    'ball_number': 'WD',
    'wickets_y': 'BBI',
    'wickets_taken': '10_Wickets'
}, inplace=True)
bowling_df

bowling_df['10W'] = 0

# Fill missing values if any
bowling_df['10W'].fillna(0, inplace=True)

bowling_df['10W'].fillna(0,inplace=True)
bowling_df

print(bowling_df.columns)

bowling_df.insert(5,'Avg',round(bowling_df['Runs']/bowling_df['Wickets'],2))
bowling_df

bowling_df.insert(6,'SR',round(bowling_df['Balls']/bowling_df['Wickets'],2))
bowling_df

bowling_df.insert(5,'Economy',round(bowling_df['Runs']/(bowling_df['Balls']/6),2))
bowling_df

# Save the DataFrame to an Excel file
output_path = './Bowler_stats.xlsx'
bowling_df.to_excel(output_path, index=False)

Matches=df.groupby('bowl_team')['match_id'].nunique().reset_index()
Matches

Runs_conceeded=df.groupby('bowl_team')['total_runs'].sum().reset_index()
Runs_conceeded

# Count balls bowled by each team excluding 'noballs' and 'wides'
Balls_bowled = df[(df['noballs'] == 0) & (df['wides'] == 0)].groupby('bowl_team').size().reset_index(name='balls_bowled')

# Count extras (total 'noballs' + 'wides') by each team
Extras = df.groupby('bowl_team')[['noballs', 'wides']].sum().reset_index()
Extras['total_extras'] = Extras['noballs'] + Extras['wides']
Extras = Extras[['bowl_team', 'total_extras']]

# Merge both DataFrames
result = pd.merge(Balls_bowled, Extras, on='bowl_team')
print(result)


Wickets_taken = df[pd.notna(df['out_player'])].groupby('bowl_team')['out_player'].count().reset_index(name='wickets_taken')
Wickets_taken

Fours_conceeded=df[df['runs_off_bat']==4].groupby('bowl_team')['runs_off_bat'].count().reset_index()
Fours_conceeded

Sixes_conceeded=df[df['runs_off_bat']==6].groupby('bowl_team')['runs_off_bat'].count().reset_index()
Sixes_conceeded

Dots = df[(df['wides'] == 0) & (df['runs_off_bat'] == 0)].groupby('bowl_team')['ball_number'].count().reset_index(name='dots')
Dots

# Filter out rows where 'out_player' is not NaN
team_wickets = df[pd.notna(df['out_player'])].groupby(['bowl_team', 'match_id'])['out_player'].count().reset_index(name='wickets')

# Find the index of the maximum wickets for each team
idx = team_wickets.groupby('bowl_team')['wickets'].idxmax()

# Use these indices to select the best bowling performances
BBI = team_wickets.loc[idx]

# Select only the relevant columns
BBI = BBI[['bowl_team', 'match_id', 'wickets']]
BBI

# Create Wickets_taken DataFrame
# Group by 'bowl_team' and count the number of dismissals (out_player)
Wickets_taken = df[pd.notna(df['out_player'])].groupby('bowl_team')['out_player'].count().reset_index(name='wickets')

# Define ten_wickets as those with 10 or more wickets
ten_wickets = Wickets_taken[Wickets_taken['wickets'] >= 10]

bowling_df=pd.merge(Matches,Runs_conceeded, on='bowl_team', how='outer')
bowling_df=pd.merge(bowling_df,Wickets_taken,on='bowl_team',how='outer')
bowling_df=pd.merge(bowling_df,Balls_bowled,on='bowl_team',how='outer')
bowling_df=pd.merge(bowling_df,Fours_conceeded,on='bowl_team',how='outer')
bowling_df=pd.merge(bowling_df,Sixes_conceeded,on='bowl_team',how='outer')
bowling_df=pd.merge(bowling_df,Dots,on='bowl_team',how='outer')
bowling_df=pd.merge(bowling_df,BBI,on='bowl_team',how='outer')
bowling_df=pd.merge(bowling_df,ten_wickets,on='bowl_team',how='outer')

print(bowling_df.head())

bowling_df.rename(columns={
    'match_id_x': 'I',
    'total_runs': 'Runs',
    'wickets_x': 'Wickets',
    'balls_bowled': 'Balls',
    'runs_off_bat_x': '4s',
    'runs_off_bat_y': '6s',
    'ball_number': 'WD',
    'wickets_y': 'BBI',
    'wickets_taken': '10_Wickets'
}, inplace=True)
bowling_df

bowling_df['10W'] = 0

# Fill missing values if any
bowling_df['10W'].fillna(0, inplace=True)

bowling_df['10W'].fillna(0,inplace=True)
bowling_df

bowling_df.insert(5,'Avg',round(bowling_df['Runs']/bowling_df['Wickets'],2))
bowling_df

bowling_df.insert(6,'SR',round(bowling_df['Balls']/bowling_df['Wickets'],2))
bowling_df

bowling_df.insert(5,'Economy',round(bowling_df['Runs']/(bowling_df['Balls']/6),2))
bowling_df